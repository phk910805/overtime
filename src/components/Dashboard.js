import React, { useState, useEffect, useCallback, memo, useRef } from 'react';\nimport { Plus } from 'lucide-react';\nimport { useOvertimeContext } from '../context';\nimport { timeUtils, dateUtils, holidayUtils, validators } from '../utils';\nimport { Toast, Modal } from './CommonUI';\nimport BulkSettingModal from './BulkSettingModal';\n\n// 시간 표시 컴포넌트\nconst TimeDisplay = memo(({ value, onClick, disabled = false, placeholder = \"00:00\", color = \"blue\" }) => {\n  const colorClass = color === \"green\" ? \"text-green-600\" : \"text-blue-600\";\n  const prefix = color === \"green\" ? \"-\" : \"+\";\n\n  const baseClasses = \"w-16 h-8 rounded text-xs flex items-center justify-center\";\n  const dynamicClasses = disabled ? \n    `${baseClasses} bg-gray-50 text-gray-400` : \n    `${baseClasses} cursor-pointer hover:bg-gray-100`;\n\n  const displayText = value === 0 ? placeholder : `${prefix}${timeUtils.formatTimeInput(value)}`;\n  const textColor = value === 0 ? \"text-gray-400\" : colorClass;\n\n  if (disabled) {\n    return (\n      <div className={dynamicClasses}>\n        {value > 0 ? `${prefix}${timeUtils.formatTimeInput(value)}` : placeholder}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={dynamicClasses}\n      onClick={onClick}\n      tabIndex={0}\n      onKeyDown={(e) => e.key === 'Enter' && onClick()}\n    >\n      <span className={textColor}>{displayText}</span>\n    </div>\n  );\n});\n\n// 시간 입력 팝업\nconst TimeInputPopup = memo(({ show, value, onClose, onSave, title = \"시간 입력\", type = \"overtime\" }) => {\n  const [hours, setHours] = useState('');\n  const [minutes, setMinutes] = useState('');\n  const [toast, setToast] = useState({ show: false, message: '', type: 'error' });\n  const hoursRef = useRef(null);\n  const minutesRef = useRef(null);\n\n  useEffect(() => {\n    if (show) {\n      const totalHours = Math.floor(value / 60);\n      const totalMinutes = value % 60;\n      \n      setHours(totalHours > 0 ? totalHours.toString().padStart(2, '0') : '');\n      setMinutes(totalMinutes > 0 ? totalMinutes.toString().padStart(2, '0') : '');\n      \n      setTimeout(() => {\n        if (hoursRef.current) {\n          hoursRef.current.focus();\n          hoursRef.current.select();\n        }\n      }, 100);\n    }\n  }, [show, value]);\n\n  const showToast = useCallback((message, type = 'error') => {\n    setToast({ show: true, message, type });\n  }, []);\n\n  const hideToast = useCallback(() => {\n    setToast({ show: false, message: '', type: 'error' });\n  }, []); \n\n  const validateAndFormatHours = useCallback((value) => {\n    if (!value.trim()) return { valid: true, formatted: '' };\n    \n    const num = parseInt(value);\n    if (isNaN(num)) return { valid: false, formatted: value };\n    \n    const validation = validators.timeValue(num, 0);\n    if (!validation.isValid) {\n      showToast(validation.message, validation.type || 'error');\n      return { valid: false, formatted: value };\n    }\n    \n    return { valid: true, formatted: num.toString().padStart(2, '0') };\n  }, [showToast]);\n\n  const validateAndFormatMinutes = useCallback((value, currentHours) => {\n    if (!value.trim()) return { valid: true, formatted: '' };\n    \n    const num = parseInt(value);\n    if (isNaN(num)) return { valid: false, formatted: value };\n\n    const hoursNum = parseInt(currentHours) || 0;\n    \n    const validation = validators.timeValue(hoursNum, num);\n    if (!validation.isValid) {\n      showToast(validation.message, validation.type || 'error');\n      return { valid: false, formatted: value };\n    }\n    \n    return { valid: true, formatted: num.toString().padStart(2, '0') };\n  }, [showToast]);\n\n  const handleSave = useCallback(() => {\n    const finalHours = parseInt(hours) || 0;\n    const finalMinutes = parseInt(minutes) || 0;\n    \n    if (finalHours === 24 && finalMinutes > 0) {\n      showToast('24시간을 초과할 수 없습니다');\n      return;\n    }\n    \n    const totalMinutes = finalHours * 60 + finalMinutes;\n    onSave(totalMinutes);\n    onClose();\n  }, [hours, minutes, onSave, onClose, showToast]);\n\n  if (!show) return null;\n\n  return (\n    <>\n      <Toast \n        message={toast.message} \n        show={toast.show} \n        onClose={hideToast}\n        type={toast.type}\n        duration={3000}\n      />\n      <Modal show={show} onClose={onClose} title={title}>\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-1\">\n              <label className=\"block text-xs text-gray-500 mb-1\">시간</label>\n              <input\n                ref={hoursRef}\n                type=\"text\"\n                value={hours}\n                onChange={(e) => {\n                  const value = e.target.value.replace(/[^\\d]/g, '');\n                  if (value.length <= 2) {\n                    const validation = validateAndFormatHours(value);\n                    if (validation.valid) {\n                      setHours(value);\n                      if (value.length === 2 && minutesRef.current) {\n                        setTimeout(() => minutesRef.current.focus(), 0);\n                      }\n                    }\n                  }\n                }}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-center focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"00\"\n                maxLength={2}\n              />\n            </div>\n            <div className=\"text-xl font-bold text-gray-400 mt-6\">:</div>\n            <div className=\"flex-1\">\n              <label className=\"block text-xs text-gray-500 mb-1\">분</label>\n              <input\n                ref={minutesRef}\n                type=\"text\"\n                value={minutes}\n                onChange={(e) => {\n                  const value = e.target.value.replace(/[^\\d]/g, '');\n                  if (value.length <= 2) {\n                    const validation = validateAndFormatMinutes(value, hours);\n                    if (validation.valid) {\n                      setMinutes(value);\n                    }\n                  }\n                }}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-center focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"00\"\n                maxLength={2}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-between\">\n          <button\n            onClick={() => { onSave(0); onClose(); }}\n            className=\"px-4 py-2 text-red-600 border border-red-300 rounded-md hover:bg-red-50\"\n          >\n            삭제\n          </button>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              취소\n            </button>\n            <button\n              onClick={handleSave}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              저장\n            </button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n});\n\n// 메인 대시보드\nconst Dashboard = memo(() => {\n  const {\n    selectedMonth,\n    updateDailyTime,\n    getAllEmployeesWithRecords,\n    getDailyData,\n    getMonthlyStats,\n    multiplier\n  } = useOvertimeContext();\n\n  const [showTimeInputPopup, setShowTimeInputPopup] = useState(false);\n  const [showBulkSetting, setShowBulkSetting] = useState(false);\n  const [toast, setToast] = useState({ show: false, message: '', type: 'success' });\n  const [holidays, setHolidays] = useState({});\n  const [currentTimeInput, setCurrentTimeInput] = useState({\n    employeeId: null,\n    day: null,\n    value: 0,\n    type: 'overtime'\n  });\n\n  useEffect(() => {\n    let isCancelled = false;\n    \n    const loadHolidays = async () => {\n      const year = selectedMonth.split('-')[0];\n      const holidayData = await holidayUtils.fetchHolidays(year);\n      \n      if (!isCancelled) {\n        setHolidays(holidayData);\n      }\n    };\n    \n    loadHolidays();\n    \n    return () => {\n      isCancelled = true;\n    };\n  }, [selectedMonth]);\n\n  const showToast = useCallback((message, type = 'success') => {\n    setToast({ show: true, message, type });\n  }, []);\n\n  const hideToast = useCallback(() => {\n    setToast({ show: false, message: '', type: 'success' });\n  }, []);\n\n  const handleBulkApplySuccess = useCallback((message) => {\n    showToast(message);\n  }, [showToast]);\n\n  const handleDailyTimeChange = useCallback((employeeId, day, totalMinutes, type) => {\n    const [year, month] = selectedMonth.split('-');\n    const date = dateUtils.formatDateString(year, month, day);\n    updateDailyTime(type, employeeId, date, totalMinutes);\n  }, [selectedMonth, updateDailyTime]);\n\n  const handleTimeInputClick = useCallback((employeeId, day, currentValue, type = 'overtime') => {\n    setCurrentTimeInput({ employeeId, day, value: currentValue, type });\n    setShowTimeInputPopup(true);\n  }, []);\n\n  const handleTimeInputSave = useCallback((newValue) => {\n    handleDailyTimeChange(currentTimeInput.employeeId, currentTimeInput.day, newValue, currentTimeInput.type);\n    setShowTimeInputPopup(false);\n  }, [currentTimeInput, handleDailyTimeChange]);\n\n  const daysInMonth = React.useMemo(() => dateUtils.getDaysInMonth(selectedMonth), [selectedMonth]);\n  const yearMonth = React.useMemo(() => selectedMonth.split('-'), [selectedMonth]);\n  const daysArray = React.useMemo(() => Array.from({ length: daysInMonth }, (_, i) => i + 1), [daysInMonth]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Toast \n        message={toast.message} \n        show={toast.show} \n        onClose={hideToast}\n        type={toast.type}\n        duration={3000}\n      />\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">\n          {selectedMonth} 월별 현황\n        </h2>\n        <button\n          onClick={() => setShowBulkSetting(true)}\n          className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 flex items-center space-x-2 text-sm\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          <span>일괄 설정</span>\n        </button>\n      </div>\n\n      {/* 완전 고정 레이아웃 */}\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"flex\">\n          {/* 고정 영역 */}\n          <div className=\"flex-shrink-0 border-r-2 border-gray-300\">\n            <table className=\"divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr className=\"h-12\">\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-20\">\n                    이름\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-20\">\n                    초과시간\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-20\">\n                    사용시간\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-24\">\n                    잔여시간{multiplier !== 1.0 ? ` (${multiplier}배)` : ''}\n                  </th>\n                  <th className=\"px-2 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-16\">\n                    구분\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {getAllEmployeesWithRecords.map((employee) => {\n                  const stats = getMonthlyStats(employee.id);\n                  \n                  return (\n                    <tr key={employee.id} className={employee.isActive ? '' : 'bg-gray-50'}>\n                      <td className={`px-4 py-4 text-sm font-medium text-gray-900 border-r border-gray-200 ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`}>\n                        {employee.name}\n                        {!employee.isActive && (\n                          <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                            삭제\n                          </span>\n                        )}\n                      </td>\n                      <td className={`px-3 py-4 text-sm text-blue-600 border-r border-gray-200 ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`}>\n                        +{timeUtils.formatTime(stats.totalOvertime)}\n                      </td>\n                      <td className={`px-3 py-4 text-sm text-green-600 border-r border-gray-200 ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`}>\n                        -{timeUtils.formatTime(stats.totalVacation)}\n                      </td>\n                      <td className={`px-3 py-4 text-sm border-r border-gray-200 ${stats.remaining >= 0 ? 'text-orange-600' : 'text-red-600'} ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`}>\n                        {stats.remaining >= 0 ? '+' : '-'}{timeUtils.formatTime(Math.abs(stats.remaining))}\n                        {stats.remaining < 0 && '(초과)'}\n                      </td>\n                      <td className={`px-2 py-2 text-center text-xs relative h-20 ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`}>\n                        <div className=\"absolute left-0 right-0 top-1/2 border-t border-gray-300 transform -translate-y-px\"></div>\n                        <div className=\"flex flex-col h-full\">\n                          <div className=\"h-10 flex items-center justify-center\">\n                            <span className=\"text-blue-600 font-medium\">초과</span>\n                          </div>\n                          <div className=\"h-10 flex items-center justify-center\">\n                            <span className=\"text-green-600 font-medium\">사용</span>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n\n          {/* 스크롤 영역 */}\n          <div className=\"flex-1 overflow-x-auto\">\n            <table className=\"w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr className=\"h-12\">\n                  {daysArray.map((day) => {\n                    const date = new Date(yearMonth[0], yearMonth[1] - 1, day);\n                    const dayOfWeekIndex = date.getDay();\n                    const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][dayOfWeekIndex];\n                    const dateString = dateUtils.formatDateString(yearMonth[0], yearMonth[1], day);\n                    const isHolidayDate = holidayUtils.isHoliday(dateString, holidays);\n                    \n                    let textColor = 'text-gray-500';\n                    if (isHolidayDate || dayOfWeekIndex === 0 || dayOfWeekIndex === 6) {\n                      textColor = 'text-violet-600';\n                    }\n                    \n                    return (\n                      <th key={day} className={`px-2 py-3 text-center text-xs font-medium ${textColor} uppercase tracking-wider w-16 bg-gray-50`}>\n                        <div className=\"flex flex-col items-center justify-center h-full\">\n                          <div className=\"flex-shrink-0\">\n                            {day.toString().padStart(2, '0')}({dayOfWeek})\n                          </div>\n                          {isHolidayDate && (\n                            <div className=\"text-[10px] text-gray-400 normal-case leading-tight mt-0.5\">\n                              {holidayUtils.getHolidayName(dateString, holidays)}\n                            </div>\n                          )}\n                        </div>\n                      </th>\n                    );\n                  })}\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {getAllEmployeesWithRecords.map((employee) => {\n                  return (\n                    <tr key={employee.id} className={employee.isActive ? '' : 'bg-gray-50'}>\n                      {daysArray.map((day) => {\n                        const date = dateUtils.formatDateString(yearMonth[0], yearMonth[1], day);\n                        const dailyMinutes = getDailyData(employee.id, date, 'overtime');\n                        const vacationMinutes = getDailyData(employee.id, date, 'vacation');\n                        \n                        return (\n                          <td key={day} className={`px-2 py-2 text-center text-xs align-top relative ${employee.isActive ? 'bg-white' : 'bg-gray-50'}`} style={{height: '80px'}}>\n                            <div className=\"absolute left-0 right-0 top-1/2 border-t border-gray-300 transform -translate-y-px\"></div>\n                            <div className=\"flex flex-col items-center justify-start h-full\">\n                              <div className=\"flex-1 flex items-center justify-center py-1\">\n                                <TimeDisplay \n                                  value={dailyMinutes}\n                                  onClick={() => handleTimeInputClick(employee.id, day, dailyMinutes, 'overtime')}\n                                  disabled={!employee.isActive}\n                                  color=\"blue\"\n                                />\n                              </div>\n                              <div className=\"flex-1 flex items-center justify-center py-1\">\n                                <TimeDisplay \n                                  value={vacationMinutes}\n                                  onClick={() => handleTimeInputClick(employee.id, day, vacationMinutes, 'vacation')}\n                                  disabled={!employee.isActive}\n                                  placeholder=\"00:00\"\n                                  color=\"green\"\n                                />\n                              </div>\n                            </div>\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <TimeInputPopup\n        show={showTimeInputPopup}\n        value={currentTimeInput.value}\n        onClose={() => setShowTimeInputPopup(false)}\n        onSave={handleTimeInputSave}\n        title={currentTimeInput.type === 'overtime' ? \"초과근무 시간 입력\" : \"휴가사용 시간 입력\"}\n        type={currentTimeInput.type}\n      />\n\n      <BulkSettingModal\n        show={showBulkSetting}\n        onClose={() => setShowBulkSetting(false)}\n        onApplySuccess={handleBulkApplySuccess}\n      />\n    </div>\n  );\n});\n\nexport default Dashboard;