import React, { memo, useCallback } from 'react';\nimport { ChevronUp, ChevronDown } from 'lucide-react';\n\n// ========== COMMON UI COMPONENTS ==========\nexport const Modal = memo(({ show, onClose, title, size = 'md', children }) => {\n  if (!show) return null;\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-40\">\n      <div className={`bg-white rounded-lg p-6 w-full ${sizeClasses[size]}`}>\n        {title && (\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{title}</h3>\n        )}\n        {children}\n      </div>\n    </div>\n  );\n});\n\nexport const ConfirmModal = memo(({ \n  show, \n  onClose, \n  onConfirm, \n  title, \n  message, \n  confirmText = \"확인\", \n  cancelText = \"취소\", \n  confirmColor = \"bg-red-600 hover:bg-red-700\" \n}) => {\n  return (\n    <Modal show={show} onClose={onClose} title={title}>\n      <div className=\"mb-6\">\n        {typeof message === 'string' ? (\n          <p className=\"text-sm text-gray-600\">{message}</p>\n        ) : (\n          message\n        )}\n      </div>\n      <div className=\"flex justify-end space-x-2\">\n        <button\n          onClick={onClose}\n          className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50\"\n        >\n          {cancelText}\n        </button>\n        <button\n          onClick={onConfirm}\n          className={`px-4 py-2 text-white rounded-md ${confirmColor}`}\n        >\n          {confirmText}\n        </button>\n      </div>\n    </Modal>\n  );\n});\n\nexport const InputField = memo(({ \n  label, \n  value, \n  onChange, \n  onBlur,\n  error, \n  type = \"text\", \n  placeholder, \n  className = \"\",\n  autoFocus = false,\n  ...rest \n}) => {\n  return (\n    <div className={className}>\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {label}\n        </label>\n      )}\n      <input\n        type={type}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        placeholder={placeholder}\n        autoFocus={autoFocus}\n        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n          error ? 'border-red-300' : 'border-gray-300'\n        }`}\n        {...rest}\n      />\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n      )}\n    </div>\n  );\n});\n\nexport const TableHeader = memo(({ children, className = \"\" }) => {\n  return (\n    <th className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${className}`}>\n      {children}\n    </th>\n  );\n});\n\nexport const SortableHeader = memo(({ field, sortConfig, onSort, children, className = \"\" }) => {\n  const getSortIcon = () => {\n    if (sortConfig.field === field) {\n      return sortConfig.direction === 'desc' ? \n        <ChevronDown className=\"w-4 h-4\" /> : \n        <ChevronUp className=\"w-4 h-4\" />;\n    }\n    return <ChevronDown className=\"w-4 h-4 text-gray-300\" />;\n  };\n\n  return (\n    <th className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${className}`}>\n      <button\n        onClick={() => onSort(field)}\n        className=\"flex items-center space-x-1 hover:text-gray-700\"\n      >\n        <span>{children}</span>\n        {getSortIcon()}\n      </button>\n    </th>\n  );\n});\n\nexport const EmptyState = memo(({ message, colSpan }) => {\n  return (\n    <tr>\n      <td colSpan={colSpan} className=\"px-6 py-8 text-center text-gray-500\">\n        {message}\n      </td>\n    </tr>\n  );\n});\n\n// ========== PAGINATION COMPONENT ==========\nexport const Pagination = memo(({ currentPage, totalPages, onPageChange, itemsPerPage, totalItems }) => {\n  const startItem = (currentPage - 1) * itemsPerPage + 1;\n  const endItem = Math.min(currentPage * itemsPerPage, totalItems);\n\n  // 현재 페이지 그룹 계산 (1-5, 6-10, 11-15...)\n  const currentGroup = Math.ceil(currentPage / 5);\n  const startPage = (currentGroup - 1) * 5 + 1;\n  const endPage = Math.min(startPage + 4, totalPages);\n  \n  // 페이지 번호 배열 생성\n  const getPageNumbers = useCallback(() => {\n    const pages = [];\n    for (let i = startPage; i <= endPage; i++) {\n      pages.push(i);\n    }\n    return pages;\n  }, [startPage, endPage]);\n\n  // 버튼 활성화 상태\n  const canGoToPrevGroup = currentGroup > 1;\n  const canGoToNextGroup = currentGroup < Math.ceil(totalPages / 5);\n  const canGoToFirst = currentPage > 1;\n  const canGoToLast = currentPage < totalPages;\n\n  // 네비게이션 핸들러\n  const goToFirstPage = useCallback(() => {\n    onPageChange(1);\n  }, [onPageChange]);\n\n  const goToLastPage = useCallback(() => {\n    onPageChange(totalPages);\n  }, [onPageChange, totalPages]);\n\n  const goToPrevGroup = useCallback(() => {\n    if (canGoToPrevGroup) {\n      const prevGroupStart = (currentGroup - 2) * 5 + 1;\n      onPageChange(prevGroupStart);\n    }\n  }, [canGoToPrevGroup, currentGroup, onPageChange]);\n\n  const goToNextGroup = useCallback(() => {\n    if (canGoToNextGroup) {\n      const nextGroupStart = currentGroup * 5 + 1;\n      onPageChange(Math.min(nextGroupStart, totalPages));\n    }\n  }, [canGoToNextGroup, currentGroup, totalPages, onPageChange]);\n\n  if (totalItems === 0) return null;\n\n  return (\n    <div className=\"flex items-center justify-between px-6 py-3 bg-gray-50 border-t border-gray-200\" style={{minHeight: '60px'}}>\n      <div className=\"flex-1 flex items-center justify-between\">\n        <div>\n          <p className=\"text-xs text-gray-500\">\n            총 <span className=\"font-medium\">{totalItems}</span>개 중{' '}\n            <span className=\"font-medium\">{startItem}</span>-<span className=\"font-medium\">{endItem}</span>개 표시\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {/* 처음으로 */}\n          <button\n            onClick={goToFirstPage}\n            disabled={!canGoToFirst}\n            className=\"px-2 py-1 text-sm text-gray-400 hover:text-gray-600 disabled:opacity-30 disabled:cursor-not-allowed\"\n            title=\"처음으로\"\n          >\n            &lt;&lt;\n          </button>\n          \n          {/* 이전 그룹 */}\n          <button\n            onClick={goToPrevGroup}\n            disabled={!canGoToPrevGroup}\n            className=\"px-2 py-1 text-sm text-gray-400 hover:text-gray-600 disabled:opacity-30 disabled:cursor-not-allowed\"\n            title=\"이전 5개\"\n          >\n            &lt;\n          </button>\n          \n          {/* 페이지 번호들 */}\n          <div className=\"flex items-center space-x-1 min-w-[200px] justify-center\">\n            {getPageNumbers().map((page) => (\n              <button\n                key={page}\n                onClick={() => onPageChange(page)}\n                className={`px-3 py-1 text-sm rounded ${\n                  page === currentPage\n                    ? 'bg-blue-100 text-blue-600 font-medium'\n                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'\n                }`}\n              >\n                {page}\n              </button>\n            ))}\n          </div>\n          \n          {/* 다음 그룹 */}\n          <button\n            onClick={goToNextGroup}\n            disabled={!canGoToNextGroup}\n            className=\"px-2 py-1 text-sm text-gray-400 hover:text-gray-600 disabled:opacity-30 disabled:cursor-not-allowed\"\n            title=\"다음 5개\"\n          >\n            &gt;\n          </button>\n          \n          {/* 마지막으로 */}\n          <button\n            onClick={goToLastPage}\n            disabled={!canGoToLast}\n            className=\"px-2 py-1 text-sm text-gray-400 hover:text-gray-600 disabled:opacity-30 disabled:cursor-not-allowed\"\n            title=\"마지막으로\"\n          >\n            &gt;&gt;\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n});", "oldText": null}]